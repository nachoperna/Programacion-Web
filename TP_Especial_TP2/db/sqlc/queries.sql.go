// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const deleteAccount = `-- name: DeleteAccount :exec
delete from accounts where alias = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, alias string) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, alias)
	return err
}

const deleteAll = `-- name: DeleteAll :exec
delete from users
`

func (q *Queries) DeleteAll(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAll)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
delete from users where alias = $1
`

func (q *Queries) DeleteUser(ctx context.Context, alias string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, alias)
	return err
}

const getAccount = `-- name: GetAccount :one
select alias, balance, last_movement_type, last_deposit, last_deposit_amount, last_transfer, last_transfer_account, last_transfer_amount, last_whidrawal, last_whitdrawal_amount from accounts where alias = $1
`

func (q *Queries) GetAccount(ctx context.Context, alias string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, alias)
	var i Account
	err := row.Scan(
		&i.Alias,
		&i.Balance,
		&i.LastMovementType,
		&i.LastDeposit,
		&i.LastDepositAmount,
		&i.LastTransfer,
		&i.LastTransferAccount,
		&i.LastTransferAmount,
		&i.LastWhidrawal,
		&i.LastWhitdrawalAmount,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
select alias, name, email, password, signed_up, last_session from users where alias = $1
`

func (q *Queries) GetUser(ctx context.Context, alias string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, alias)
	var i User
	err := row.Scan(
		&i.Alias,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.SignedUp,
		&i.LastSession,
	)
	return i, err
}

const insertAccount = `-- name: InsertAccount :exec
insert into accounts (alias, balance) values ($1, default)
`

func (q *Queries) InsertAccount(ctx context.Context, alias string) error {
	_, err := q.db.ExecContext(ctx, insertAccount, alias)
	return err
}

const insertUser = `-- name: InsertUser :exec
insert into users 
      (alias, name, email, password)
      values ($1, $2, $3, $4)
`

type InsertUserParams struct {
	Alias    string `json:"alias"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.Alias,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}

const listAccounts = `-- name: ListAccounts :many
select alias, balance, last_movement_type, last_deposit, last_deposit_amount, last_transfer, last_transfer_account, last_transfer_amount, last_whidrawal, last_whitdrawal_amount from accounts
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.Alias,
			&i.Balance,
			&i.LastMovementType,
			&i.LastDeposit,
			&i.LastDepositAmount,
			&i.LastTransfer,
			&i.LastTransferAccount,
			&i.LastTransferAmount,
			&i.LastWhidrawal,
			&i.LastWhitdrawalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
select alias, name, email, password, signed_up, last_session from users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Alias,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.SignedUp,
			&i.LastSession,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :exec
update accounts set 
      balance=$2, 
      last_movement_type=$3, 
      last_deposit=$4,
      last_deposit_amount=$5,
      last_transfer=$6,
      last_transfer_account=$7,
      last_transfer_amount=$8,
      last_whidrawal=$9,
      last_whitdrawal_amount=$10 
      where alias = $1
`

type UpdateAccountParams struct {
	Alias                string         `json:"alias"`
	Balance              string         `json:"balance"`
	LastMovementType     sql.NullString `json:"last_movement_type"`
	LastDeposit          sql.NullTime   `json:"last_deposit"`
	LastDepositAmount    sql.NullString `json:"last_deposit_amount"`
	LastTransfer         sql.NullTime   `json:"last_transfer"`
	LastTransferAccount  sql.NullString `json:"last_transfer_account"`
	LastTransferAmount   sql.NullString `json:"last_transfer_amount"`
	LastWhidrawal        sql.NullTime   `json:"last_whidrawal"`
	LastWhitdrawalAmount sql.NullString `json:"last_whitdrawal_amount"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateAccount,
		arg.Alias,
		arg.Balance,
		arg.LastMovementType,
		arg.LastDeposit,
		arg.LastDepositAmount,
		arg.LastTransfer,
		arg.LastTransferAccount,
		arg.LastTransferAmount,
		arg.LastWhidrawal,
		arg.LastWhitdrawalAmount,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
update users set name = $2, email = $3, password = $4 where alias = $1
`

type UpdateUserParams struct {
	Alias    string `json:"alias"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Alias,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}
